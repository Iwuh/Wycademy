using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;

namespace KiranicoScraper
{
    static class Utils
    {
        /// <summary>
        /// Converts a monster's web name to the properly formatted version.
        /// </summary>
        /// <param name="webName">The monster's name as used in a Kiranico URL.</param>
        /// <returns>The monster's name formatted as it is in game.</returns>
        public static string GetFormattedMonsterName(string webName)
        {
            switch (webName)
            {
                case "yian-kut-ku":
                    return "Yian Kut-Ku";
                case "blue-yian-kut-ku":
                    return "Blue Yian Kut-Ku";
                case "dahren-mohran":
                    return "Dah'ren Mohran";
                case "plum-d.hermitaur":
                    return "Plum Daimyo Hermitaur";
                case "xenojiiva":
                    return "Xeno'jiiva";
                case "kulu-ya-ku":
                    return "Kulu-Ya-Ku";
                case "tzitzi-ya-ku":
                    return "Tzitzi-Ya-Ku";
                case "tobi-kadachi":
                    return "Tobi-Kadachi";
                case "pukei-pukei":
                    return "Pukei-Pukei";
                default:
                    return TitleCase(string.Join(" ", webName.Split('-')));
            }
        }

        /// <summary>
        /// Converts an input string to title case.
        /// </summary>
        /// <param name="input">The input string.</param>
        /// <returns>The input string formatted as title case.</returns>
        public static string TitleCase(string input) => CultureInfo.CurrentCulture.TextInfo.ToTitleCase(input);

        /// <summary>
        /// Generates an <see cref="IEnumerable{T}"/> by applying a range of integers to a generator function.
        /// </summary>
        /// <typeparam name="T">The element type of the returned <see cref="IEnumerable{T}"/></typeparam>
        /// <param name="start">The starting value of the integer range.</param>
        /// <param name="stop">The non-inclusive ending value of the integer range.</param>
        /// <param name="generator">A function that takes an integer and returns an element.</param>
        /// <returns>An <see cref="IEnumerable{T}"/> generated by applying each integer of the range to <paramref name="generator"/>.</returns>
        /// <exception cref="ArgumentOutOfRangeException">Thrown if <paramref name="stop"/> is not greater than <paramref name="start"/>.</exception>
        public static IEnumerable<T> Sequence<T>(int start, int stop, Func<int, T> generator)
        {
            if (stop <= start) throw new ArgumentOutOfRangeException(nameof(stop), stop, "Stop must be greater than start.");

            for (int i = start; i < stop; i++)
            {
                yield return generator(i);
            }
        }
    }
}
