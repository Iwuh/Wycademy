// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Wycademy.Core.Enums;
using Wycademy.Core.Models;

namespace Wycademy.Core.Migrations
{
    [DbContext(typeof(WycademyContext))]
    [Migration("20190428152958_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:Enum:game", "four,generations,world")
                .HasAnnotation("Npgsql:Enum:horn_note", "purple,white,yellow,red,orange,green,blue,light_blue")
                .HasAnnotation("Npgsql:Enum:weapon_effect_type", "fire,water,ice,thunder,dragon,poison,para,sleep,blast")
                .HasAnnotation("Npgsql:Enum:weapon_type", "gs,ls,sn_s,db,hammer,hh,lance,gl,sa,ig,cb,lbg,hbg,bow")
                .HasAnnotation("Npgsql:PostgresExtension:fuzzystrmatch", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Wycademy.Core.Models.BowStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArcShot")
                        .IsRequired();

                    b.Property<string[]>("ChargeShots")
                        .IsRequired();

                    b.Property<string[]>("Coatings")
                        .IsRequired();

                    b.Property<int>("WeaponLevelId");

                    b.HasKey("Id");

                    b.HasIndex("WeaponLevelId")
                        .IsUnique();

                    b.ToTable("BowStats");
                });

            modelBuilder.Entity("Wycademy.Core.Models.GunCrouchingFireShot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClipSize");

                    b.Property<int>("GunStatsId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("GunStatsId", "Name");

                    b.ToTable("GunCrouchingFireShots");
                });

            modelBuilder.Entity("Wycademy.Core.Models.GunInternalShot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Capacity");

                    b.Property<int>("ClipSize");

                    b.Property<int>("GunStatsId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("GunStatsId", "Name");

                    b.ToTable("GunInternalShots");
                });

            modelBuilder.Entity("Wycademy.Core.Models.GunRapidFireShot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GunStatsId");

                    b.Property<float?>("Modifier");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ShotCount");

                    b.Property<string>("WaitTime");

                    b.HasKey("Id");

                    b.HasAlternateKey("GunStatsId", "Name");

                    b.ToTable("GunRapidFireShots");
                });

            modelBuilder.Entity("Wycademy.Core.Models.GunShot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClipSize");

                    b.Property<int>("GunStatsId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("NeedsSkill");

                    b.HasKey("Id");

                    b.HasAlternateKey("GunStatsId", "Name");

                    b.ToTable("GunShots");
                });

            modelBuilder.Entity("Wycademy.Core.Models.GunStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Deviation")
                        .IsRequired();

                    b.Property<string>("Recoil")
                        .IsRequired();

                    b.Property<string>("ReloadSpeed")
                        .IsRequired();

                    b.Property<int>("WeaponLevelId");

                    b.HasKey("Id");

                    b.HasIndex("WeaponLevelId")
                        .IsUnique();

                    b.ToTable("GunStats");
                });

            modelBuilder.Entity("Wycademy.Core.Models.GunlanceShellStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ShellLevel");

                    b.Property<string>("ShellType")
                        .IsRequired();

                    b.Property<int>("WeaponLevelId");

                    b.HasKey("Id");

                    b.HasIndex("WeaponLevelId")
                        .IsUnique();

                    b.ToTable("GunlanceShells");
                });

            modelBuilder.Entity("Wycademy.Core.Models.Hitzone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Cut");

                    b.Property<int>("Dragon");

                    b.Property<int>("Fire");

                    b.Property<Game?>("Game")
                        .IsRequired();

                    b.Property<int>("Ice");

                    b.Property<int>("Impact");

                    b.Property<int>("MonsterId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Shot");

                    b.Property<int>("Thunder");

                    b.Property<int>("Water");

                    b.HasKey("Id");

                    b.HasAlternateKey("MonsterId", "Game", "Name");

                    b.ToTable("Hitzones");
                });

            modelBuilder.Entity("Wycademy.Core.Models.HornNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<HornNote?>("Note1")
                        .IsRequired();

                    b.Property<HornNote?>("Note2")
                        .IsRequired();

                    b.Property<HornNote?>("Note3")
                        .IsRequired();

                    b.Property<int>("WeaponLevelId");

                    b.HasKey("Id");

                    b.HasIndex("WeaponLevelId")
                        .IsUnique();

                    b.ToTable("HornNotes");
                });

            modelBuilder.Entity("Wycademy.Core.Models.ItemEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Enraged");

                    b.Property<int>("Fatigued");

                    b.Property<Game?>("Game")
                        .IsRequired();

                    b.Property<int>("MonsterId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Normal");

                    b.HasKey("Id");

                    b.HasAlternateKey("MonsterId", "Game", "Name");

                    b.ToTable("ItemEffects");
                });

            modelBuilder.Entity("Wycademy.Core.Models.Monster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ProperName")
                        .IsRequired();

                    b.Property<string>("WebName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("WebName");

                    b.ToTable("Monsters");
                });

            modelBuilder.Entity("Wycademy.Core.Models.Phial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PhialType")
                        .IsRequired();

                    b.Property<int?>("PhialValue");

                    b.Property<int>("WeaponLevelId");

                    b.HasKey("Id");

                    b.HasIndex("WeaponLevelId")
                        .IsUnique();

                    b.ToTable("Phials");
                });

            modelBuilder.Entity("Wycademy.Core.Models.StaggerLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ExtractColour")
                        .IsRequired();

                    b.Property<Game?>("Game")
                        .IsRequired();

                    b.Property<int>("MonsterId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Stagger");

                    b.HasKey("Id");

                    b.HasAlternateKey("MonsterId", "Game", "Name");

                    b.ToTable("StaggerLimits");

                    b.HasDiscriminator<Game?>("Game");
                });

            modelBuilder.Entity("Wycademy.Core.Models.StatusEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Damage");

                    b.Property<int>("Duration");

                    b.Property<Game?>("Game")
                        .IsRequired();

                    b.Property<int>("Increase");

                    b.Property<int>("InitialThreshold");

                    b.Property<int>("MaxThreshold");

                    b.Property<int>("MonsterId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ReductionAmount");

                    b.Property<int>("ReductionTime");

                    b.HasKey("Id");

                    b.HasAlternateKey("MonsterId", "Game", "Name");

                    b.ToTable("StatusEffects");
                });

            modelBuilder.Entity("Wycademy.Core.Models.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Game?>("Game")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ParentId");

                    b.Property<string>("Rare")
                        .IsRequired();

                    b.Property<string>("Url")
                        .IsRequired();

                    b.Property<WeaponType?>("WeaponType")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Game", "Name", "WeaponType");

                    b.HasIndex("ParentId");

                    b.ToTable("Weapon");

                    b.HasDiscriminator<Game?>("Game");
                });

            modelBuilder.Entity("Wycademy.Core.Models.WeaponEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Attack");

                    b.Property<WeaponEffectType?>("EffectType")
                        .IsRequired();

                    b.Property<bool>("NeedsAwaken");

                    b.Property<int>("WeaponLevelId");

                    b.HasKey("Id");

                    b.HasAlternateKey("WeaponLevelId", "EffectType");

                    b.ToTable("WeaponEffects");
                });

            modelBuilder.Entity("Wycademy.Core.Models.WeaponLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Affinity");

                    b.Property<int>("Defense");

                    b.Property<Game?>("Game")
                        .IsRequired();

                    b.Property<int>("LevelOrdinal");

                    b.Property<int>("Raw");

                    b.Property<string>("Slots")
                        .IsRequired();

                    b.Property<int>("WeaponId");

                    b.HasKey("Id");

                    b.HasAlternateKey("WeaponId", "LevelOrdinal");

                    b.ToTable("WeaponLevels");

                    b.HasDiscriminator<Game?>("Game");
                });

            modelBuilder.Entity("Wycademy.Core.Models.WeaponSharpness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Blue");

                    b.Property<int>("Green");

                    b.Property<int>("Orange");

                    b.Property<int>("Purple");

                    b.Property<int>("Red");

                    b.Property<int>("SharpnessOrdinal");

                    b.Property<int>("WeaponLevelId");

                    b.Property<int>("White");

                    b.Property<int>("Yellow");

                    b.HasKey("Id");

                    b.HasAlternateKey("WeaponLevelId", "SharpnessOrdinal");

                    b.ToTable("WeaponSharpnesses");
                });

            modelBuilder.Entity("Wycademy.Core.Models.StaggerLimit4U", b =>
                {
                    b.HasBaseType("Wycademy.Core.Models.StaggerLimit");

                    b.HasDiscriminator().HasValue(Game.Four);
                });

            modelBuilder.Entity("Wycademy.Core.Models.StaggerLimitGen", b =>
                {
                    b.HasBaseType("Wycademy.Core.Models.StaggerLimit");

                    b.Property<int?>("Sever");

                    b.HasDiscriminator().HasValue(Game.Generations);
                });

            modelBuilder.Entity("Wycademy.Core.Models.StaggerLimitWorld", b =>
                {
                    b.HasBaseType("Wycademy.Core.Models.StaggerLimit");

                    b.Property<int?>("Break");

                    b.Property<int?>("Sever")
                        .HasColumnName("StaggerLimitWorld_Sever");

                    b.HasDiscriminator().HasValue(Game.World);
                });

            modelBuilder.Entity("Wycademy.Core.Models.Weapon4U", b =>
                {
                    b.HasBaseType("Wycademy.Core.Models.Weapon");

                    b.HasDiscriminator().HasValue(Game.Four);
                });

            modelBuilder.Entity("Wycademy.Core.Models.WeaponGen", b =>
                {
                    b.HasBaseType("Wycademy.Core.Models.Weapon");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("FinalDescription")
                        .IsRequired();

                    b.Property<string>("FinalName")
                        .IsRequired();

                    b.HasDiscriminator().HasValue(Game.Generations);
                });

            modelBuilder.Entity("Wycademy.Core.Models.WeaponWorld", b =>
                {
                    b.HasBaseType("Wycademy.Core.Models.Weapon");

                    b.HasDiscriminator().HasValue(Game.World);
                });

            modelBuilder.Entity("Wycademy.Core.Models.WeaponLevel4U", b =>
                {
                    b.HasBaseType("Wycademy.Core.Models.WeaponLevel");

                    b.Property<float>("DisplayModifier");

                    b.Property<int>("FrenzyAffinity");

                    b.HasDiscriminator().HasValue(Game.Four);
                });

            modelBuilder.Entity("Wycademy.Core.Models.WeaponLevelGen", b =>
                {
                    b.HasBaseType("Wycademy.Core.Models.WeaponLevel");

                    b.HasDiscriminator().HasValue(Game.Generations);
                });

            modelBuilder.Entity("Wycademy.Core.Models.WeaponLevelWorld", b =>
                {
                    b.HasBaseType("Wycademy.Core.Models.WeaponLevel");

                    b.Property<float>("DisplayModifier")
                        .HasColumnName("WeaponLevelWorld_DisplayModifier");

                    b.HasDiscriminator().HasValue(Game.World);
                });

            modelBuilder.Entity("Wycademy.Core.Models.BowStats", b =>
                {
                    b.HasOne("Wycademy.Core.Models.WeaponLevel", "WeaponLevel")
                        .WithOne("BowStats")
                        .HasForeignKey("Wycademy.Core.Models.BowStats", "WeaponLevelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wycademy.Core.Models.GunCrouchingFireShot", b =>
                {
                    b.HasOne("Wycademy.Core.Models.GunStats", "GunStats")
                        .WithMany("GunCrouchingFireShots")
                        .HasForeignKey("GunStatsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wycademy.Core.Models.GunInternalShot", b =>
                {
                    b.HasOne("Wycademy.Core.Models.GunStats", "GunStats")
                        .WithMany("GunInternalShots")
                        .HasForeignKey("GunStatsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wycademy.Core.Models.GunRapidFireShot", b =>
                {
                    b.HasOne("Wycademy.Core.Models.GunStats", "GunStats")
                        .WithMany("GunRapidFireShots")
                        .HasForeignKey("GunStatsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wycademy.Core.Models.GunShot", b =>
                {
                    b.HasOne("Wycademy.Core.Models.GunStats", "GunStats")
                        .WithMany("GunShots")
                        .HasForeignKey("GunStatsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wycademy.Core.Models.GunStats", b =>
                {
                    b.HasOne("Wycademy.Core.Models.WeaponLevel", "WeaponLevel")
                        .WithOne("GunStats")
                        .HasForeignKey("Wycademy.Core.Models.GunStats", "WeaponLevelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wycademy.Core.Models.GunlanceShellStats", b =>
                {
                    b.HasOne("Wycademy.Core.Models.WeaponLevel", "WeaponLevel")
                        .WithOne("GunlanceShellStats")
                        .HasForeignKey("Wycademy.Core.Models.GunlanceShellStats", "WeaponLevelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wycademy.Core.Models.Hitzone", b =>
                {
                    b.HasOne("Wycademy.Core.Models.Monster", "Monster")
                        .WithMany("Hitzones")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wycademy.Core.Models.HornNotes", b =>
                {
                    b.HasOne("Wycademy.Core.Models.WeaponLevel", "WeaponLevel")
                        .WithOne("HornNotes")
                        .HasForeignKey("Wycademy.Core.Models.HornNotes", "WeaponLevelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wycademy.Core.Models.ItemEffect", b =>
                {
                    b.HasOne("Wycademy.Core.Models.Monster", "Monster")
                        .WithMany("ItemEffects")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wycademy.Core.Models.Phial", b =>
                {
                    b.HasOne("Wycademy.Core.Models.WeaponLevel", "WeaponLevel")
                        .WithOne("Phials")
                        .HasForeignKey("Wycademy.Core.Models.Phial", "WeaponLevelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wycademy.Core.Models.StaggerLimit", b =>
                {
                    b.HasOne("Wycademy.Core.Models.Monster", "Monster")
                        .WithMany("StaggerLimits")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wycademy.Core.Models.StatusEffect", b =>
                {
                    b.HasOne("Wycademy.Core.Models.Monster", "Monster")
                        .WithMany("StatusEffects")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wycademy.Core.Models.Weapon", b =>
                {
                    b.HasOne("Wycademy.Core.Models.Weapon", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Wycademy.Core.Models.WeaponEffect", b =>
                {
                    b.HasOne("Wycademy.Core.Models.WeaponLevel", "WeaponLevel")
                        .WithMany("WeaponEffects")
                        .HasForeignKey("WeaponLevelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wycademy.Core.Models.WeaponLevel", b =>
                {
                    b.HasOne("Wycademy.Core.Models.Weapon", "Weapon")
                        .WithMany("WeaponLevels")
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wycademy.Core.Models.WeaponSharpness", b =>
                {
                    b.HasOne("Wycademy.Core.Models.WeaponLevel", "WeaponLevel")
                        .WithMany("WeaponSharpnesses")
                        .HasForeignKey("WeaponLevelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
